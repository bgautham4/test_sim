#ifndef UTILS_H
#define UTILS_H

#include "units.h"
#include <array>
#include <cmath>
#include <cstddef>
#include <initializer_list>
#include <stdexcept>
#include <unordered_map>
#include <utility>
#include <ranges>

/*
Put sample points here
*/
constexpr int K = 100;
using samples_t = std::array<std::tuple<int, double, double>, K>;
inline constexpr samples_t SAMPLES{
std::tuple{1, 0.037808223247147714, 0.00827619309626851},
{2, 0.03958077355985585, 0.008674296646424844},
{3, 0.04285902550455722, 0.009008452602857238},
{4, 0.043371598452892506, 0.009317410987480687},
{5, 0.04394644606249905, 0.009698905331055515},
{6, 0.043974130564457016, 0.009835363759940088},
{7, 0.045440258015591053, 0.010210329599424814},
{8, 0.043611279927194116, 0.010540465379317422},
{9, 0.04517747923698393, 0.011297953935960928},
{10, 0.04531353700094589, 0.011175812175339323},
{11, 0.0465428191754553, 0.011320384715692172},
{12, 0.04959776768820327, 0.011521430514398932},
{13, 0.05271203294141243, 0.01168463806328962},
{14, 0.05632266057310281, 0.011887147727120495},
{15, 0.060566744115203616, 0.012096939611163022},
{16, 0.06360984491049379, 0.012328111742437956},
{17, 0.06622175904537055, 0.013019834891328531},
{18, 0.07020775225321087, 0.013094796504260106},
{19, 0.07502495725378856, 0.013433205810223598},
{20, 0.07637556281950429, 0.013850346371008638},
{21, 0.0809243482647724, 0.013555602576438815},
{22, 0.08348080595411982, 0.013834306232280734},
{23, 0.09283819555432773, 0.013823737900453461},
{24, 0.10359078814864767, 0.014184655726511211},
{25, 0.09793465628754347, 0.014274053446644423},
{26, 0.09889777780044824, 0.014524740213565262},
{27, 0.10342592373490334, 0.014709652509939764},
{28, 0.10525686404519323, 0.01481868586793417},
{29, 0.10752063277590124, 0.014809731722578509},
{30, 0.1113285021721453, 0.01530738690298451},
{31, 0.11710092414226105, 0.015083170430679808},
{32, 0.12696824998905262, 0.015394863396692715},
{33, 0.12337290172581561, 0.01635701699206996},
{34, 0.13108001576204384, 0.016335007606102615},
{35, 0.12932637833397498, 0.016489079348167745},
{36, 0.13532387746461466, 0.016570925537580918},
{37, 0.1448183601144059, 0.016920230415159936},
{38, 0.14237632784992457, 0.016706602230080074},
{39, 0.14459418621139997, 0.017314525271693457},
{40, 0.14815228406274528, 0.017208459810670186},
{41, 0.1500732439115297, 0.01805883736661522},
{42, 0.15639162873279075, 0.01794966946946062},
{43, 0.15953682760163299, 0.018078626220782375},
{44, 0.17124025519699493, 0.017985454175098448},
{45, 0.16630907859653235, 0.018288504867277556},
{46, 0.1776357013277891, 0.018406687303667436},
{47, 0.1753403780838618, 0.018951654984877123},
{48, 0.17870474668840566, 0.01867263997617093},
{49, 0.18134465259174967, 0.01972657743624855},
{50, 0.18422568265703462, 0.019573347442268837},
{51, 0.1882842786428405, 0.01993122798276917},
{52, 0.19373883570476277, 0.020077469752300757},
{53, 0.19718852979796272, 0.019729015148043923},
{54, 0.20035985987633467, 0.02008579773935147},
{55, 0.20341015950543806, 0.02023248438536608},
{56, 0.20732990581364857, 0.019929032339850338},
{57, 0.21367834856112797, 0.0211101243073062},
{58, 0.215858780637835, 0.02118367225003604},
{59, 0.2205209957976495, 0.021305162948548537},
{60, 0.2228000423158793, 0.021660127306687163},
{61, 0.22674847040803003, 0.02149199630277327},
{62, 0.22905656214683287, 0.02163868086255489},
{63, 0.2340394860948436, 0.021629029061217168},
{64, 0.23891691256675027, 0.021948474733639815},
{65, 0.24357850894783484, 0.023282164371942037},
{66, 0.24626885856623235, 0.023469673015608993},
{67, 0.24967760118571194, 0.023958853134725573},
{68, 0.2558131739497185, 0.023722128055861366},
{69, 0.2583398045306759, 0.024042012896734324},
{70, 0.2615351706211056, 0.02391752591660836},
{71, 0.26514802128076553, 0.024092793865828938},
{72, 0.27114053323332754, 0.024440618504407118},
{73, 0.2755077156739739, 0.025250179942669437},
{74, 0.2778095008375553, 0.025123790638729257},
{75, 0.28197233625237017, 0.02536540686702117},
{76, 0.2847585946159518, 0.026202284073002225},
{77, 0.28822875283658506, 0.025872752449549404},
{78, 0.2930270836760218, 0.025720194448424032},
{79, 0.29710481672858197, 0.025712598055327957},
{80, 0.30041696585714817, 0.02581091915751877},
{81, 0.30425805334622663, 0.0266623161194348},
{82, 0.3076273665452997, 0.027030708729896855},
{83, 0.31161277713254093, 0.02741777438662664},
{84, 0.3161418379750103, 0.028000532147128037},
{85, 0.3191519840417997, 0.027514285109516517},
{86, 0.34351190916177904, 0.02757534183192241},
{87, 0.32786860977384175, 0.027885983946546355},
{88, 0.3330273755233396, 0.027886427469386153},
{89, 0.35728529347106813, 0.028918592481143476},
{90, 0.3523860081860965, 0.029485419884099383},
{91, 0.34404493265208747, 0.029472955781604065},
{92, 0.34870084933936596, 0.029398339962955395},
{93, 0.3692652228332701, 0.02983108145627059},
{94, 0.3562637098133564, 0.029406965286702728},
{95, 0.3608284666202962, 0.029517972309276195},
{96, 0.3630903682818538, 0.029858720666078628},
{97, 0.3655866232553595, 0.03135897619877352},
{98, 0.3708940590214398, 0.031012315925165585},
{99, 0.37628059812328396, 0.031714516131927266},
{100, 0.38170327226786566, 0.03226947692813878}
};

constexpr auto get_prefill_time_for(int x) {
	assert(x>0 && x<=K);
	auto [i, p, d] = SAMPLES[x-1];
	return ps_from(TimeUnits::S, p);
}

constexpr auto get_decode_time_for(int x) {
	assert(x>0 && x<=K);
	auto [i, p, d] = SAMPLES[x-1];
	return ps_from(TimeUnits::S, d);
}

#endif
